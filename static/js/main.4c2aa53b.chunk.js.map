{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","itemError","list","key","value","this","setState","id","Math","random","slice","push","updatedList","filter","el","style","backgroundColor","position","left","top","transform","className","TextField","required","label","defaultValue","margin","onChange","e","updateInput","target","Button","variant","color","onClick","addItem","fontSize","map","i","fontFamily","Checkbox","size","del","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAkIeA,E,YA3Hb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAEDC,MAAQ,CACXC,QAAS,GACTC,UAAW,GACXC,KAAK,IANS,E,yEASNC,EAAKC,GACfC,KAAKC,SAAL,eACGH,EAAKC,M,gCAGR,IAAIH,EAAY,GACVD,EAAU,CACdO,GAAI,EAAIC,KAAKC,SACbL,MAAMC,KAAKN,MAAMC,QAAQU,SAErBR,EAAI,YAAOG,KAAKN,MAAMG,MACN,KAAlBF,EAAQI,QACZH,EAAU,mBAEPA,EACDI,KAAKC,SAAS,CACZJ,OACAF,QAAQ,GACRC,UAAUA,KACNC,EAAKS,KAAKX,GAClBK,KAAKC,SAAS,CACZJ,OACAF,QAAS,GACTC,UAAU,Q,0BAgCVM,GACF,IACMK,EADI,YAAMP,KAAKN,MAAMG,MACFW,QAAO,SAAAC,GAAE,OAAIA,EAAGP,KAAMA,KAC/CF,KAAKC,SAAS,CAACJ,KAAKU,M,+BAGZ,IAAD,OACP,OACE,yBAAKG,MAAO,CAACC,gBAAiB,GAC5BC,SAAU,WAAYC,KAAM,MAAOC,IAAK,MACxCC,UAAW,yBAAyBC,UAAW,OAC/C,0CACF,6BACG,kBAACC,EAAA,EAAD,CACCC,UAAQ,EACRhB,GAAG,oBACHiB,MAAM,QACNC,aAAa,QACbC,OAAO,SACPtB,MAASC,KAAKN,MAAMC,QACpB2B,SAAW,SAAAC,GAAC,OAAG,EAAKC,YAAY,UAAWD,EAAEE,OAAO1B,UAEpD,6BACE,kBAAC2B,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAQ,UAAUC,QAAW,kBAAM,EAAKC,YAApE,WAID9B,KAAKN,MAAME,UAAW,yBAAKc,MAAS,CAACqB,SAAS,GAAIH,MAAO,QAAS5B,KAAKN,MAAME,WAAiB,KAC/F,6BACA,4BACCI,KAAKN,MAAMG,KAAKmC,KAAI,SAAAC,GACnB,OAEE,wBAAIvB,MAAS,CAACqB,SAAS,GAAGH,MAAO,QAAQM,WAAY,kBAAkBb,OAAO,UAAUvB,IAAOmC,EAAE/B,IAC/F,6BAAM+B,EAAElC,MACN,kBAACoC,EAAA,EAAD,CACMP,MAAO,YAEb,kBAACF,EAAA,EAAD,CACEU,KAAM,QACNT,QAAQ,YACRC,MAAM,UACNC,QAAW,kBAAI,EAAKQ,IAAIJ,EAAE/B,MAJ5B,kB,GAvGAoC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4c2aa53b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Button} from '@material-ui/core/';\nimport { TextField } from '@material-ui/core';\nimport { Checkbox } from '@material-ui/core';\n\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      newItem: \"\",\n      itemError: \"\",\n      list:[]\n    }\n  }\n  updateInput(key, value){\n    this.setState({\n      [key]:value    });\n  }\n  addItem(){\n    let itemError = \"\"\n    const newItem = {\n      id: 1 + Math.random(),\n      value:this.state.newItem.slice()\n    };\n    const list = [...this.state.list];\n    if (newItem.value === \"\"){\n    itemError='Write something';\n    }\n    if(itemError){\n      this.setState({\n        list,\n        newItem:\"\",\n        itemError:itemError})\n    }else{  list.push(newItem);  \n    this.setState({\n      list,\n      newItem: \"\",\n      itemError:\"\"\n    })\n  }\n  }\n//   async fetchUsers(){\n//     const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n//     const data = await res.json();\n//     const names = data.map(item=>item.name);\n//     const hrefs = data.map(item=>item.name);\n//     this.setState ({names: names});\n// }\n// componentDidMount(){\n//     this.fetchUsers()  \n// }\n\n// render (){\n//     return(\n//         <ol>\n//            {this.state.names.map(item=> {\n//                 return  (<li>\n//                         <a href = '#s'>\n//                             {item}\n//                         </a>\n//                     </li>)\n//                     }\n//                 )\n//             }\n//         </ol>\n//     );\n// }\n// }\n  \n  del(id){\n    const list =[...this.state.list];\n    const updatedList = list.filter(el => el.id !==id); \n    this.setState({list:updatedList});\n  }\n\n  render (){\n    return (\n      <div style={{backgroundColor: '',\n        position: 'absolute', left: '50%', top: '50%',\n        transform: 'translate(-50%, -50%)'}}className= \"App\"> \n        <h1>To Do List</h1>\n      <div>\n         <TextField\n          required\n          id=\"standard-required\"\n          label=\"input\"\n          defaultValue=\"To do\"\n          margin=\"normal\"\n          value = {this.state.newItem}\n          onChange ={e=> this.updateInput(\"newItem\", e.target.value)}\n          />\n          <div>\n            <Button variant=\"contained\" color = \"primary\" onClick = {() => this.addItem()}>\n            Add...\n            </Button>\n          </div>\n          {this.state.itemError? <div style = {{fontSize:12, color: \"red\"}}>{this.state.itemError}</div>:null}\n          <div>\n          <ul>\n          {this.state.list.map(i =>{\n            return (\n              \n              <li style = {{fontSize:25,color: \"black\",fontFamily: \"Times New Roman\",margin:\"normal\"}}key = {i.id}>\n                <div>{i.value}\n                  <Checkbox\n                        color= 'primary'\n                  ></Checkbox>\n                  <Button\n                    size= 'small'\n                    variant='contained'\n                    color='primary'\n                    onClick = {()=>this.del(i.id)}\n                    >\n                      X\n                  </Button>\n                </div>\n                 \n              </li>\n            )\n          })}\n        </ul>\n        </div>\n      </div>\n      \n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}